/**
 * The first line in the build configuration applies the Android plugin for
 * Gradle to this build and makes the android block available to specify
 * Android-specific build options.
 */

apply plugin: 'com.android.application'

group 'com.jeffthefate.dmbquiz'
version '2.1'

sourceCompatibility = 1.5

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
    compile project(':stacktrace')
    compile project(':viewpagerindicator')
    compile project(':slidingmenu')
    compile 'com.facebook.android:facebook-android-sdk:4.+'
    compile 'com.backendless:backendless:3.0.24'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:support-fragment:25.1.0"
    compile 'com.google.android.gms:play-services-analytics:10.0.1'
}

/**
 * The android block is where you configure all your Android-specific
 * build options.
 */

android {
    /**
     * compileSdkVersion specifies the Android API level Gradle should use to
     * compile your app. This means your app can use the API features included in
     * this API level and lower.
     *
     * buildToolsVersion specifies the version of the SDK build tools, command-line
     * utilities, and compiler that Gradle should use to build your app. You need to
     * download the build tools using the SDK Manager.
     */

    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    /**
     * The defaultConfig block encapsulates default settings and entries for all
     * build variants, and can override some attributes in main/AndroidManifest.xml
     * dynamically from the build system. You can configure product flavors to override
     * these values for different versions of your app.
     */

    defaultConfig {

        /**
         * applicationId uniquely identifies the package for publishing.
         * However, your source code should still reference the package name
         * defined by the package attribute in the main/AndroidManifest.xml file.
         */

        applicationId 'com.jeffthefate.dmbquiz'

        // Defines the minimum API level required to run the app.
        minSdkVersion 16

        // Specifies the API level used to test the app.
        targetSdkVersion 25

        // Defines the version number of your app.
        versionCode 12

        // Defines a user-friendly version name for your app.
        versionName "2.1"

        multiDexEnabled true
    }

    /**
     * The buildTypes block is where you can configure multiple build types.
     * By default, the build system defines two build types: debug and release. The
     * debug build type is not explicitly shown in the default build configuration,
     * but it includes debugging tools and is signed with the debug key. The release
     * build type applies Proguard settings and is not signed by default.
     */

    buildTypes {

        /**
         * By default, Android Studio configures the release build type to enable code
         * shrinking, using minifyEnabled, and specifies the Proguard settings file.
         */

        release {
            minifyEnabled false // Enables code shrinking for the release build type.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    /**
     * The productFlavors block is where you can configure multiple product
     * flavors. This allows you to create different versions of your app that can
     * override the defaultConfig block with their own settings. Product flavors are
     * optional, and the build system does not create them by default. This example
     * creates a free and paid product flavor. Each product flavor then specifies
     * its own application ID, so that they can exist on the Google Play Store, or
     * an Android device, simultaneously.
     */

    productFlavors {
        free {
            applicationIdSuffix ''
        }
        /**
         paid {applicationId 'com.example.myapp.paid'}*/
    }

    /**
     * The splits block is where you can configure different APK builds that
     * each contain only code and resources for a supported screen density or
     * ABI. You'll also need to configure your build so that each APK has a
     * different versionCode.
     */

    splits {
        // Settings to build multiple APKs based on screen density.
        density {

            // Enable or disable building multiple APKs.
            enable false

            // Exclude these densities when building multiple APKs.
            exclude "ldpi", "tvdpi", "xxxhdpi", "400dpi", "560dpi"
        }
    }

    configurations {
        all*.exclude group: 'com.android.support', module: 'support-v4'
        all*.exclude group: 'com.android.support', module: 'support-annotations'
    }

}

/**
 * The dependencies block in the module-level build configuration file
 * only specifies dependencies required to build the module itself.
 */

apply plugin: 'com.google.gms.google-services'